#!/anaconda2/bin/python

#Objectives:
#1. Generate random walking with the redis GEO database

#import statements
import os
import sys
import random
import redis
import csv
from itertools import izip

MIN_MEMBER_NUM=10000 #Defined in the commands to redis txt file, generated by the get_POI.py script
MAX_MEMBER_NUM=25738 #Defined in the commands to redis txt file, dependent on the number of values in the CSV file passed into the get_POI.py script

KEY_VALUE = "Boston"
MIN_RADIUS = 75 #in meters, this is the first radius we use to search
MAX_RADIUS = 300 #in meters, this is the max radius we are willing to search
STEP_RADIUS = 25 #in meters, if we don't find a valid set, step up the radius with this
NUM_PAST_MEMBERS = 3 #minimum is one, which is where you currently are

WALKING_DURATION = 50 #in number of members, this is the max number of members we will simulate each player walking
NUM_SAMPLES = 1000

RESULTS_PATH = 'sim_results'


def find_neighbor(redis_handle, recent_members, radius=MIN_RADIUS):
	neighbors = redis_handle.georadiusbymember(KEY_VALUE,recent_members[-1],radius,unit="m")
	subset = set(neighbors) - set(recent_members)
	if len(subset) > 0:
		return random.sample(subset,1)
	else:
		if radius >= MAX_RADIUS:
			print("ERROR, radius has reached MAX_RADIUS, returning", recent_members[0])
			return recent_members[0]
		else:
			return find_neighbor(redis_handle,recent_members,radius+STEP_RADIUS)

def generate_walk(tag='0000000'):
	r = redis.StrictRedis(host='localhost', port=6379, db=0) #first, define the python redis handler
	
	members = []
	locations = []

	#The first member is randomly generated
	members.append(str(random.randint(MIN_MEMBER_NUM,MAX_MEMBER_NUM)))

	#The locations list will need to be udpated with the member's coordinates (in this case, it will always be the last member in list)
	#We're using the extend function instead of the append function because geopos function in redis returns a list of tuples
	locations.extend(r.geopos(KEY_VALUE,members[-1]))

	for count in range(WALKING_DURATION):
		#there are some times when the simulation walks into a corner and can't get out
		try:
			members.extend(find_neighbor(r,members[-NUM_PAST_MEMBERS:],MIN_RADIUS))
			locations.extend(r.geopos(KEY_VALUE,members[-1]))
		except redis.exceptions.ResponseError: #in those cases when the simulation goes into a corner, redis throws a response error
			pass

	with open(RESULTS_PATH+'/'+'sim'+tag+'_temp.csv', 'w') as f:
		writer = csv.writer(f)
		writer.writerows(izip(members, locations))

	with open(RESULTS_PATH+'/'+'sim'+tag+'_temp.csv', 'r') as infile, open(RESULTS_PATH+'/'+'sim'+tag+'.csv', 'w') as outfile:
		data = infile.read()
		data = data.replace('"', '')
		data = data.replace('(', '')
		data = data.replace(')', '')
		outfile.write(data)
		outfile.close()

	os.remove(RESULTS_PATH+'/'+'sim'+tag+'_temp.csv')

if __name__ == "__main__":

	for i in range(NUM_SAMPLES):
		generate_walk(str("%07d" % (i,)))

	


